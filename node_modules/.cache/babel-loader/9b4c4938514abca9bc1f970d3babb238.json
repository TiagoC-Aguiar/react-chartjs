{"ast":null,"code":"var _jsxFileName = \"/media/tiago/HD2T/ScriptsJS/react/chartjs/src/charts/LineChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Chart from 'chart.js';\n\nconst LineChart = ({\n  labels,\n  data,\n  title,\n  zeroLineColor\n}) => {\n  const canvas = useRef(null);\n  const [stateChart, setStateChart] = useState(null);\n  useEffect(() => {\n    if (stateChart !== null) stateChart.destroy();\n    const lineChart = new Chart(canvas.current, {\n      type: 'line',\n      data: {\n        labels: ['tit1', 'tit2', 'tit1', 'tit2'],\n        datasets: [1, 2, 3, 4]\n      },\n      options: {\n        color: ['#70CAD1'],\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: false,\n          text: title,\n          fontColor: '#FFFFFF'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              fontColor: \"white\",\n              beginAtZero: true\n            },\n            gridLines: {\n              zeroLineColor: zeroLineColor,\n              color: '#606163'\n            }\n          }],\n          xAxes: [{\n            ticks: {\n              fontColor: \"white\",\n              beginAtZero: true\n            },\n            gridLines: {\n              zeroLineColor: zeroLineColor,\n              color: '#606163'\n            }\n          }]\n        }\n      }\n    });\n    setStateChart(lineChart);\n  }, [data]);\n  return React.createElement(\"canvas\", {\n    ref: canvas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  });\n};\n\nexport default LineChart;","map":{"version":3,"sources":["/media/tiago/HD2T/ScriptsJS/react/chartjs/src/charts/LineChart.js"],"names":["React","useRef","useEffect","useState","Chart","LineChart","labels","data","title","zeroLineColor","canvas","stateChart","setStateChart","destroy","lineChart","current","type","datasets","options","color","responsive","legend","display","text","fontColor","tooltips","mode","intersect","hover","scales","yAxes","ticks","beginAtZero","gridLines","xAxes"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,IAAT;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,KAA0C;AACxD,QAAMC,MAAM,GAAGT,MAAM,CAAC,IAAD,CAArB;AAEA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,IAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIS,UAAU,KAAK,IAAnB,EAAyBA,UAAU,CAACE,OAAX;AAEzB,UAAMC,SAAS,GAAG,IAAIV,KAAJ,CAAUM,MAAM,CAACK,OAAjB,EAA0B;AACxCC,MAAAA,IAAI,EAAE,MADkC;AAExCT,MAAAA,IAAI,EAAE;AACFD,QAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CADN;AAEFW,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAFR,OAFkC;AAMxCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE,CAAC,SAAD,CADF;AAELC,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE;AADL,SAHH;AAMLd,QAAAA,KAAK,EAAE;AACHc,UAAAA,OAAO,EAAE,KADN;AAEHC,UAAAA,IAAI,EAAEf,KAFH;AAGHgB,UAAAA,SAAS,EAAE;AAHR,SANF;AAWLC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,IAAI,EAAE,OADA;AAENC,UAAAA,SAAS,EAAE;AAFL,SAXL;AAeLC,QAAAA,KAAK,EAAE;AACHF,UAAAA,IAAI,EAAE,SADH;AAEHC,UAAAA,SAAS,EAAE;AAFR,SAfF;AAmBLE,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,KAAK,EAAE;AACHP,cAAAA,SAAS,EAAE,OADR;AAEHQ,cAAAA,WAAW,EAAE;AAFV,aADH;AAKJC,YAAAA,SAAS,EAAE;AACPxB,cAAAA,aAAa,EAAEA,aADR;AAEPU,cAAAA,KAAK,EAAE;AAFA;AALP,WAAD,CADH;AAWJe,UAAAA,KAAK,EAAE,CAAC;AACJH,YAAAA,KAAK,EAAE;AACHP,cAAAA,SAAS,EAAE,OADR;AAEHQ,cAAAA,WAAW,EAAE;AAFV,aADH;AAKJC,YAAAA,SAAS,EAAE;AACPxB,cAAAA,aAAa,EAAEA,aADR;AAEPU,cAAAA,KAAK,EAAE;AAFA;AALP,WAAD;AAXH;AAnBH;AAN+B,KAA1B,CAAlB;AAkDAP,IAAAA,aAAa,CAACE,SAAD,CAAb;AACH,GAvDQ,EAuDN,CAACP,IAAD,CAvDM,CAAT;AAyDA,SACI;AAAQ,IAAA,GAAG,EAAEG,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAjED;;AAmEA,eAAeL,SAAf","sourcesContent":["import React, {useRef, useEffect, useState} from \"react\";\nimport Chart from 'chart.js';\n\nconst LineChart = ({labels, data, title, zeroLineColor}) => {\n    const canvas = useRef(null);\n\n    const [stateChart, setStateChart] = useState(null);\n\n    useEffect(() => {\n\n        if (stateChart !== null) stateChart.destroy();\n\n        const lineChart = new Chart(canvas.current, {\n            type: 'line',\n            data: {\n                labels: ['tit1', 'tit2', 'tit1', 'tit2'],\n                datasets: [1, 2, 3, 4],\n            },\n            options: {\n                color: ['#70CAD1'],\n                responsive: true,\n                legend: {\n                    display: false,\n                },\n                title: {\n                    display: false,\n                    text: title,\n                    fontColor: '#FFFFFF',\n                },\n                tooltips: {\n                    mode: 'index',\n                    intersect: false,\n                },\n                hover: {\n                    mode: 'nearest',\n                    intersect: true\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontColor: \"white\",\n                            beginAtZero: true\n                        },\n                        gridLines: {\n                            zeroLineColor: zeroLineColor,\n                            color: '#606163',\n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: \"white\",\n                            beginAtZero: true\n                        },\n                        gridLines: {\n                            zeroLineColor: zeroLineColor,\n                            color: '#606163',\n                        }\n                    }]\n                }\n            },\n        });\n\n        setStateChart(lineChart);\n    }, [data]);\n\n    return (\n        <canvas ref={canvas}/>\n    );\n};\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}